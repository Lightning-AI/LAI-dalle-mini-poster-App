import logging

import gradio as gr
from lightning.app.components.serve import ServeGradio
from lightning_app import BuildConfig, CloudCompute
from rich.logging import RichHandler

from research_app.dalle_mini import DalleMini

FORMAT = "%(message)s"
logging.basicConfig(level="NOTSET", format=FORMAT, datefmt="[%X]", handlers=[RichHandler()])

logger = logging.getLogger(__name__)


class JAXBuildConfig(BuildConfig):
    def build_commands(self):
        return [
            "pip uninstall jax -y",
            "pip install --upgrade 'jax[cuda]' -f https://storage.googleapis.com/jax-releases/jax_cuda_releases.html",
        ]


class ModelDemo(ServeGradio):
    """Serve model with Gradio UI.

    You need to define i. `build_model` and ii. `predict` method and Lightning `ServeGradio` component will
    automatically launch the Gradio interface.
    """

    inputs = gr.inputs.Textbox(
        default="sunset over a lake in the mountains", label="Generate images from a text prompt"
    )
    outputs = gr.outputs.Image(label="Images generated by Dalle Mini", type="pil")
    enable_queue = True
    examples = [
        ["the Eiffel tower landing on the moon"],
        ["sunset over a lake in the mountains"],
    ]

    def __init__(self, *args, **kwargs):
        super().__init__(
            parallel=True, cloud_compute=CloudCompute("gpu"), cloud_build_config=JAXBuildConfig(), *args, **kwargs
        )

    def build_model(self):
        return DalleMini()

    def predict(self, query: str) -> str:
        return self.model.predict(query)
